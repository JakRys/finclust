"""
Evaluation module

"""

import abc

import pandas as pd
import quantstats as qs


class Evaluator:
    """
    Modul for evaluation of portfolio returns.
    """

    @abc.abstractmethod
    def evaluate(self, returns: pd.DataFrame) -> pd.DataFrame:
        """
        Runs the evaluation of returns.
        
        Parameters
        ----------
        returns: pd.DataFrame
            Returns from which evaluation metrics are calculated.
        """
        raise NotImplementedError


class QuantstatsEvaluator(Evaluator):
    """
    Evaluator which uses metrics from Quantstats library.

    For details, see https://github.com/ranaroussi/quantstats.

    Parameters
    ----------
    benchmark=None
        Set the benchmark for the strategy
    
    rf=0.
        Set the risk-free rate of return
    
    display=False
        Suppress the printing of intermediate results
    
    mode='basic'
        Specify the type of output that is generated by the function
    
    sep=False
        Specify whether the returns should be separated into a positive and negative component
    
    compounded=True
        Determine whether the returns are simple or compounded
    
    periods_per_year=252
        Calculate the annualized returns
    
    prepare_returns=True
        Prepare the returns of the strategy and benchmark
    
    match_dates=False
        Ensure that the dates of the returns match those of the benchmark
    
    **kwargs
        Pass keyworded variable length of arguments to a function
    """

    def __init__(self, benchmark=None, rf=0., display=False,
            mode='basic', sep=False, compounded=True,
            periods_per_year=252, prepare_returns=True,
            match_dates=False, **kwargs):
        self.benchmark = benchmark
        self.rf = rf
        self.display = display
        self.mode = mode
        self.sep = sep
        self.compounded = compounded
        self.periods_per_year = periods_per_year
        self.prepare_returns = prepare_returns
        self.match_dates = match_dates
        self.kwargs = kwargs


    def evaluate(self, returns: pd.DataFrame) -> pd.DataFrame:
        """
        The evaluate function is a wrapper around the quantstats metrics function.
        It returns a DataFrame of performance statistics for the given returns.
        
        Parameters
        ----------
        returns: pd.DataFrame
            Table of returns to evaluation
        
        Returns
        -------
            The metrics of the portfolios
        """
        return qs.reports.metrics(
            returns,
            benchmark = self.benchmark,
            rf = self.rf,
            display = self.display,
            mode = self.mode,
            sep = self.sep,
            compounded = self.compounded,
            periods_per_year = self.periods_per_year,
            prepare_returns = self.prepare_returns,
            match_dates = self.match_dates,
            **self.kwargs
        )